!function(a){"use strict";function b(){this.nodes=[],this.eqsLength=0}b.prototype.debounce=function(a,b,c){var d;return function(){var e=this,f=arguments,g=function(){d=null,c||a.apply(e,f)},h=c&&!d;clearTimeout(d),d=setTimeout(g,b),h&&a.apply(e,f)}},b.prototype.refreshNodes=function(){b.nodes=document.querySelectorAll("[break-pts]"),b.nodesLength=b.nodes.length},b.prototype.sortObj=function(a){var b=[],c={};for(var d in a)a.hasOwnProperty(d)&&b.push({key:d,value:a[d]});b.sort(function(a,b){return a.value-b.value});for(var e=0;e<b.length;e++){var f=b[e];c[f.key]=f.value}return c},b.prototype.states=function(){var a,c,d=[],e=[];for(c=0;c<b.nodesLength;c++){d.push(b.nodes[c].offsetWidth),a={};try{a=JSON.parse(b.nodes[c].getAttribute("eq-pts")),e.push(a)}catch(f){console.log("Invalid JSON. Remember to wrap your attribute in single quotes (') and your keys in double quotes (\")")}}for(c=0;c<b.nodesLength;c++){var g=d[c],h=b.nodes[c];a=e[c];var i=Object.keys(a),j=i.length,k=i[0],l=i[j-1];if(g<a[k])h.removeAttribute("eq-state");else if(g>=a[l])h.setAttribute("eq-state",l);else for(var m=0;j>m;m++){var n=i[m],o=i[m+1];if(0===m&&g<a[n]){h.removeAttribute("eq-state");break}if(void 0===o){h.setAttribute("eq-state",n);break}if(g>=a[n]&&g<a[o]){h.setAttribute("eq-state",n);break}}}},a=a||new b,"undefined"!=typeof module&&module.exports?module.exports=a:"function"==typeof define&&define.amd?define(function(){return a}):window.eqjs=a}(window.eqjs),function(a){window.onload=function(){a.refreshNodes(),a.states()},window.onresize=a.debounce(function(){a.states()},20)}(window.eqjs);